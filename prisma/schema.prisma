// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workout {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  notes     String?
  sets      Set[]
}

model Set {
  id         Int   @id @default(autoincrement())
  reps       Int
  weight     Float
  workoutId  Int
  exerciseId Int

  workout  Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id])

  createdAt DateTime @default(now())
}

model Exercise {
  id          Int      @id @default(autoincrement())
  name        String
  muscleGroup String?
  description String?
  sets        Set[]
  createdAt   DateTime @default(now())
}

// model User {
//   id       Int        @id @default(autoincrement())
//   userName String     @unique
//   workouts Workout[]
//   Exercise Exercise[]
// }

// model Workout {
//   id        Int        @id @default(autoincrement())
//   createdAt DateTime   @default(now())
//   exercises Exercise[]
//   User      User?      @relation(fields: [userId], references: [id])
//   userId    Int?
// }

// model Exercise {
//   id        Int      @id @default(autoincrement())
//   title     String
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
//   workout   Workout? @relation(fields: [workoutId], references: [id])
//   workoutId Int?
// }
